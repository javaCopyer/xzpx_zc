<?xml version="1.0" encoding="UTF-8"?>  
  
<beans xmlns="http://www.springframework.org/schema/beans"  
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
         xmlns:aop="http://www.springframework.org/schema/aop"  
         xmlns:tx="http://www.springframework.org/schema/tx"  
         xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd  
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd  
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd">  
               
         <aop:aspectj-autoproxy proxy-target-class="true"/> <!--AOP动态代理的方式，
         														默认为false即jdk东动态代理的方式，但是实现这种的动态代理的方式需要目标类实现至少有一个接口的实现
         													    proxy-target-class="true"时为强制使用cglib的动态代理方式，这种代理方式不需要目标类实现接口，即动态代理pojo类-->

    <bean id="controllerAnnotation" class="com.xzpx_zc.spring.aop.ControllerAOP" /> <!--基于注解的切面  -->
    <!-- <bean id="advice" class="springAOP.Advice" /> -->   <!-- 切面 -->
    <!-- <aop:config>  
        <aop:aspect id="aspect" ref="advice">  定义切面
            <aop:pointcut id="pointUserMgr" expression="execution(* springAOP.*.*(..))"/> point cut 表达式  切入点表达式
            <aop:before method="dobefore"  pointcut-ref="pointUserMgr"/>    前置通知
            <aop:after method="doAfter"  pointcut-ref="pointUserMgr"/>  	后置通知
            <aop:around method="doAround"  pointcut-ref="pointUserMgr"/>  	环绕通知
            <aop:after-returning method="doReturn"  pointcut-ref="pointUserMgr"/>  返回通知 
            <aop:after-throwing method="doThrowing" throwing="ex" pointcut-ref="pointUserMgr"/>  异常通知 
              
        </aop:aspect>  
    </aop:config>   -->
</beans>  